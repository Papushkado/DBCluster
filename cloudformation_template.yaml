Description: MySQL Cluster with Proxy and Gatekeeper patterns
Outputs:
  GatekeeperIP:
    Description: IP address of Gatekeeper Instance
    Value: !GetAtt 'GatekeeperInstance.PublicIp'
  MySQLManagerIP:
    Description: IP address of MySQL Manager
    Value: !GetAtt 'MySQLManager.PublicIp'
  ProxyIP:
    Description: IP address of Proxy Instance
    Value: !GetAtt 'ProxyInstance.PublicIp'
Resources:
  GatekeeperInstance:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.large
      SecurityGroups:
        - !Ref 'GatekeeperSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y python3 python3-pip nginx
            - ufw enable
            - ufw allow 80
            - ufw allow 22
            - ufw deny default
    Type: AWS::EC2::Instance
  GatekeeperSecurityGroup:
    Properties:
      GroupDescription: Security group for Gatekeeper instance
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
    Type: AWS::EC2::SecurityGroup
  MySQLManager:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref 'MySQLSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y mysql-server
            - wget https://downloads.mysql.com/docs/sakila-db.tar.gz
            - tar -xzf sakila-db.tar.gz
            - mysql -u root < sakila-db/sakila-schema.sql
            - mysql -u root < sakila-db/sakila-data.sql
            - apt-get install -y sysbench
    Type: AWS::EC2::Instance
  MySQLSecurityGroup:
    Properties:
      GroupDescription: Allow MySQL access
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '3306'
          IpProtocol: tcp
          ToPort: '3306'
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
    Type: AWS::EC2::SecurityGroup
  MySQLWorker1:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref 'MySQLSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y mysql-server
            - wget https://downloads.mysql.com/docs/sakila-db.tar.gz
            - tar -xzf sakila-db.tar.gz
            - mysql -u root < sakila-db/sakila-schema.sql
            - mysql -u root < sakila-db/sakila-data.sql
            - apt-get install -y sysbench
    Type: AWS::EC2::Instance
  MySQLWorker2:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref 'MySQLSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y mysql-server
            - wget https://downloads.mysql.com/docs/sakila-db.tar.gz
            - tar -xzf sakila-db.tar.gz
            - mysql -u root < sakila-db/sakila-schema.sql
            - mysql -u root < sakila-db/sakila-data.sql
            - apt-get install -y sysbench
    Type: AWS::EC2::Instance
  ProxyInstance:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.large
      SecurityGroups:
        - !Ref 'ProxySecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y python3 python3-pip
            - pip3 install mysql-connector-python
    Type: AWS::EC2::Instance
  ProxySecurityGroup:
    Properties:
      GroupDescription: Security group for Proxy instance
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
    Type: AWS::EC2::SecurityGroup
  TrustedHostInstance:
    Properties:
      IamInstanceProfile: LabRole
      ImageId: ami-0aa2b7722dc1b5612
      InstanceType: t2.large
      SecurityGroups:
        - !Ref 'GatekeeperSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-get update
            - apt-get install -y python3 python3-pip
            - ufw enable
            - ufw allow 22
            - ufw deny default
    Type: AWS::EC2::Instance
